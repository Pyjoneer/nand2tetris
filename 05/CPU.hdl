// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // decode instruction
        // A <= instruction[15]=0
        // C <= instruction[15]=1
        Not(in=instruction[15], out=insc);
        And(a=instruction[15], b=true, out=insa);  // alias
        
        And(a=instruction[11], b=insa, out=zx); // c1
        And(a=instruction[10], b=insa, out=nx); // c2        
        And(a=instruction[9], b=insa, out=zy);  // c3
        And(a=instruction[8], b=insa, out=ny);  // c4
        And(a=instruction[7], b=insa, out=f);   // c5
        And(a=instruction[6], b=insa, out=no);  // c6

        // destinations
        // A <= d1=instruction[5]
        // D <= d2=instruction[4]
        // M <= d3=instruction[3]

        // Register A
        // lva (load value to register a)
        //      * value from A instruction
        //      * value from ALU
        // la (load to register a)
        //      * if it is instruction A
        //      * destination in instruction C (d1=1)
        // select a input
        //      * if instruction C then select literal from instruction
        //      * if instruction A then select ALU output
        Or(a=insc, b=instruction[5], out=la);
        Mux16(a[0..14]=instruction[0..14], a[15]=false, b=oalu, sel=instruction[15], out=ina);
        ARegister(in=ina, load=la, out=ar, out=outa, out[0..14]=addressM);

        // Register D
        // load is controlled by d2 in C instruction
        And(a=insa, b=instruction[4], out=ld);
        DRegister(in=oalu, load=ld, out=od);

        // ALU
        // first operand is always D
        // second operand is A if instruction[12] == 0, is M if instruction[12] == 1
        Mux16(a=outa, b=inM, sel=instruction[12], out=rop);
        ALU(x=od, y=rop, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=oalu, zr=zr, ng=ltz);

        // Additional ALU flags
        Not(in=zr, out=nzr);
        //Or(a=zr, b=ltz, out=lez);
        Not(in=ltz, out=gtz);

        // Write destination
        // ALU computation output from CPU
        // d3 => instruction[3]
        // d2 => instruction[4]
        // d1 => instruction[5]
        And16(a=oalu, b=oalu, out=outM);  // out to memory, alias
        And(a=insa, b=instruction[3], out=writeM);

        // Jump to address stored in A if at least one j1, j2, j3 is true
        // Conditions
        // j1=1 and out < 0
        // j2=1 and out == 0
        // j3=1 and out > 0
        And(a=nzr, b=gtz, out=pos);
        And(a=instruction[0], b=pos, out=j3);
        And(a=instruction[1], b=zr, out=j2);
        And(a=instruction[2], b=ltz, out=j1);

        // Can jump if instruction type C and at least one jump bit is set and its jump condition is met
        Or(a=j1, b=j2, out=jmp12);
        Or(a=jmp12, b=j3, out=jmp123);
        And(a=jmp123, b=insa, out=jmp);

        PC(in=ar, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}